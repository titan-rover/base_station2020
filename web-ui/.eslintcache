[{"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/index.js":"1","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/App.js":"2","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/Science.js":"3","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/Extreme.js":"4","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/Autonomous.js":"5","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/serviceWorker.js":"6","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/IMU.js":"7","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/MapTile.js":"8","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/Compass.js":"9","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/UltrasonicSensor.js":"10","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/GPS.js":"11","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/MobilityCurrentDraw.js":"12","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/InverseKinematics.js":"13","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/AntennaSignal.js":"14","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/UVSensor.js":"15","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/TemperatureSensor.js":"16","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/HumiditySensor.js":"17","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/CO2Sensor.js":"18","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/Navbar.js":"19","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/XR.js":"20"},{"size":1049,"mtime":1615326574688,"results":"21","hashOfConfig":"22"},{"size":13461,"mtime":1615435070726,"results":"23","hashOfConfig":"22"},{"size":4645,"mtime":1611729881786,"results":"24","hashOfConfig":"22"},{"size":4893,"mtime":1611729881786,"results":"25","hashOfConfig":"22"},{"size":4899,"mtime":1611729881786,"results":"26","hashOfConfig":"22"},{"size":5003,"mtime":1611729881790,"results":"27","hashOfConfig":"22"},{"size":1099,"mtime":1613207132365,"results":"28","hashOfConfig":"22"},{"size":598,"mtime":1611729881790,"results":"29","hashOfConfig":"22"},{"size":606,"mtime":1611729881790,"results":"30","hashOfConfig":"22"},{"size":2091,"mtime":1613165644665,"results":"31","hashOfConfig":"22"},{"size":14218,"mtime":1611729881790,"results":"32","hashOfConfig":"22"},{"size":3457,"mtime":1613164814196,"results":"33","hashOfConfig":"22"},{"size":8812,"mtime":1611811138101,"results":"34","hashOfConfig":"22"},{"size":1828,"mtime":1613165667729,"results":"35","hashOfConfig":"22"},{"size":1271,"mtime":1611729881790,"results":"36","hashOfConfig":"22"},{"size":1781,"mtime":1611729881790,"results":"37","hashOfConfig":"22"},{"size":1549,"mtime":1611729881790,"results":"38","hashOfConfig":"22"},{"size":1200,"mtime":1611729881790,"results":"39","hashOfConfig":"22"},{"size":1430,"mtime":1615431541747,"results":"40","hashOfConfig":"22"},{"size":867,"mtime":1615327384435,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"17gfkhs",{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/index.js",["91"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Link, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Science from \"./Science\";\nimport Extreme from \"./Extreme\";\nimport Autonomous from \"./Autonomous\";\nimport XR from \"./XR\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst routing = (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\">\n        <App />\n      </Route>\n      <Route path=\"/science\">\n        <Science />\n      </Route>\n      <Route path=\"/extreme\">\n        <Extreme />\n      </Route>\n      <Route path=\"/autonomous\">\n        <Autonomous />\n      </Route>\n      <Route path=\"/XR\">\n        <XR />\n      </Route>\n    </Switch>\n  </Router>\n);\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["92","93"],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/App.js",["94","95","96"],"// React imports\nimport React, { Component } from \"react\";\n\n// Bootstrap imports\nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\n// Toastify imports\n// Toasts are temporary notifications that pop up for a short amount of time\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// Custom React Components\n/*\nImport classes from the different component files \n*/\nimport IMU from \"./components/IMU\";\nimport MapTile from \"./components/MapTile\";\nimport Compass from \"./components/Compass\";\nimport UltrasonicSensor from \"./components/UltrasonicSensor\";\nimport GPS from \"./components/GPS\";\nimport AntennaSignal from \"./components/AntennaSignal\";\nimport MobilityCurrentDraw from \"./components/MobilityCurrentDraw\";\nimport ROSLIB from \"roslib\";\nimport InverseKinematics from \"./components/InverseKinematics\";\nimport TemperatureSensor from \"./components/TemperatureSensor\";\nimport MyNavbar from \"./components/Navbar\";\n\nclass App extends Component {\n  // Set Static variables to use as values for other logic\n  THROTTLE_RATE = 1000;\n  QUEUE_LENGTH = 1;\n\n  POOR_SIGNAL_ID = \"poor-signal-id\";\n  HIGH_CURRENT_ID = \"high-current-id\";\n\n  constructor(props) {\n    super(props);\n    console.log(\"CONSTRUCTOR CALLED\");\n\n    // in react, both this.props and this.state represent the rendered values (i.e what's currently on the screen)\n    this.state = {\n\n      // Set dictionaries with keys and values with data structures\n      imu: {\n        // Default/Offset Oriention for Rover Model\n        rotation: { x: -Math.PI / 2, y: 0, z: Math.PI / 2 },\n        position: { x: 0, y: -60, z: 40 },\n        // heading: null    // Depreciated Variable\n      },\n\n      // Following Data is not currently used beyond fake testing data\n      //    GPS, Antenna Signal, Ultrasonic Sensor, and Current Draw for Claw and Mobility\n      gps: {\n        currentPosition: [null, null]\n      },\n\n      antenna: {\n        decibels: []\n      },\n      ultrasonic: {\n        distance: []\n      },\n      roboclaw: {\n        a: {\n          amps: []\n        },\n        b: {\n          amps: []\n        }\n      },\n      mobility: {\n        amps: []\n      }\n    };\n\n    /* this.connectRosBridge(url) is a top level function call that passes the url to the connectRosBridge(url) functions\n       inside of all the custom react imports we imported at the top. */\n    //this.connectRosBridge(\"ws://192.168.1.100:9090\");\n\n    // this.connectRosBridge(\"ws://192.168.1.103:9090\");\n    this.connectRosBridge(\"ws://localhost:9090\");\n\n\n    /* These lines instantiate listeners, publishers, and callback registrations for all the react modules we imported */\n    this.createListeners();\n    this.createPublishers();\n    this.registerCallbacks();\n  }\n\n  registerCallbacks() {\n    //Register ros callbacks\n    this.ros.on(\"connection\", () => {\n      this.setState({\n        status: \"Connected\"\n      });\n    });\n    this.ros.on(\"error\", error => {\n      this.setState({\n        status: \"Error\"\n      });\n    });\n    this.ros.on(\"closed\", () => {\n      this.setState({\n        status: \"Closed\"\n      });\n    });\n\n    // Register listener callbacks\n    // Handlers for when ROS messages have been received\n    // Generally updates/sets state data which with re-render the UI with new data\n\n    // Antenna message handler\n    if (this.antenna_listener) {\n      this.antenna_listener.subscribe(m => { // arrow functions are lambas\n        let prevData = [...this.state.antenna.decibels];\n\n        if (prevData.length >= 5) {\n          prevData.shift();\n        }\n\n        prevData.push([new Date().getTime(), m.signal_strength]); // push adds to an array\n\n        if (m.signal_strength < 10) {\n          toast.error(\"SIGNAL STRENGTH CRITICAL!\", { // display a toast message at position: with the correct css class element (poor_signal_id) \n            position: toast.POSITION.BOTTOM_RIGHT,\n            toastId: this.POOR_SIGNAL_ID\n          });\n        }\n\n        this.setState({ //setState() schedules an update to a component's state object. When state changes the component responds by re-rendering\n          antenna: {\n            decibels: prevData\n          }\n        });\n      });\n    }\n\n    // Rover GPS message handler\n    if (this.rovergps_listener) {\n      this.rovergps_listener.subscribe(m => {\n        console.log(m);\n        this.setState({ //setState() schedules an update to a component's state object. When state changes the component responds by re-rendering\n          latitude: m.roverLat,\n          longitude: m.roverLon\n        });\n      });\n    }\n\n    // IMU message handler\n    if (this.imu_listener) {\n      this.imu_listener.subscribe(m => {\n        // let x = Math.cos(m.yaw) * Math.cos(m.pitch);\n        // let y = Math.sin(m.yaw) * Math.cos(m.pitch);\n        // let z = Math.sin(m.pitch);\n\n        // Quaternian orientation\n        let x = m.orientation.x;\n        let y = m.orientation.y;\n        let z = m.orientation.z;\n        let w = m.orientation.w;\n\n        let roll = null;\n        let pitch = null;\n        let yaw = null;\n\n\n        // Convertions to Roll, Pitch, and Yaw\n        // Roll\n        let sinr_cosp = 2 * (w * x + y * z);\n        let cosr_cosp = 1 - 2 * (x * x + y * y);\n        roll = Math.atan2(sinr_cosp, cosr_cosp);\n\n        // Pitch\n        let sinp = 2 * (w * y - z * x);\n        if (Math.abs(sinp) >= 1)\n          if (sinp >= 0)\n            pitch = Math.PI / 2; // use 90 degrees if out of range\n          else\n            pitch = -Math.PI / 2;\n        else\n          pitch = Math.asin(sinp);\n\n        // Yaw\n        let siny_cosp = 2 * (w * z + x * y);\n        let cosy_cosp = 1 - 2 * (y * y + z * z);\n        yaw = Math.atan2(siny_cosp, cosy_cosp);\n\n        // Console Output\n        console.log(\"Yaw: \" + yaw);\n        console.log(\"Pitch: \" + pitch);\n        console.log(\"Roll: \" + roll);\n\n        // console.log(m);\n        // console.log(x, y, z);\n\n        // Set State\n        this.setState({ //setState() schedules an update to a component's state object. When state changes the component responds by re-rendering\n          imu: {\n            rotation: {\n              x: -roll - Math.PI / 2,\n              y: -pitch,\n              z: yaw + Math.PI / 2\n              // x: x - Math.PI/2,\n              // y: y,\n              //z: z + Math.PI/2\n            },\n            position: this.state.imu.position\n          }\n        });\n      });\n    }\n\n    // Current Draw message handler\n    if (this.mobility_listener) {\n      this.mobility_listener.subscribe(m => {\n        let prevDataA = [...this.state.roboclaw.a.amps];\n        let prevDataB = [...this.state.roboclaw.b.amps];\n        let prevDataC = [...this.state.mobility.amps];\n\n        if (prevDataA.length >= 5) {\n          prevDataA.shift();\n        }\n\n        prevDataA.push([new Date().getTime(), m.current_draw]);\n\n        if (prevDataB.length >= 5) {\n          prevDataB.shift();\n        }\n\n        prevDataB.push([new Date().getTime(), Math.max(m.current_draw - 5, 0)]);\n\n        if (prevDataC.length >= 5) {\n          prevDataC.shift();\n        }\n\n        prevDataC.push(m.current_draw);\n\n        if (m.current_draw > 70) {\n          toast.warn(\"CURRENT DRAW HIGH!\", {\n            position: toast.POSITION.BOTTOM_RIGHT,\n            toastId: this.HIGH_CURRENT_ID\n          });\n        }\n\n        this.setState({\n          //       roboclaw: {\n          //         a: { amps: prevDataA },\n          //         b: { amps: prevDataB }\n          //       }\n          mobility: {\n            amps: prevDataC\n          }\n        });\n      });\n    }\n\n    if (this.ultrasonic_listener) {\n      this.ultrasonic_listener.subscribe(m => {\n        let prevDataD = [...this.state.ultrasonic.distance];\n\n        if (prevDataD.length >= 5) {\n          prevDataD.shift();\n        }\n\n        prevDataD.push([new Date().getTime(), m.max_distance]); // push adds to an array\n\n        if (m.max_distance < 10) {\n          toast.error(\"LESS THAN 10 DISTANCE!\", { // display a toast message at position: with the correct css class element (poor_signal_id) \n            position: toast.POSITION.BOTTOM_RIGHT,\n            toastId: this.POOR_SIGNAL_ID\n          });\n        }\n\n        this.setState({\n          ultrasonic: {\n            distance: prevDataD\n          }\n        });\n      });\n    }\n  }\n\n  // Creates ROS Topic objects for Publishers\n  createPublishers() {\n    try {\n      this.gps_publisher = new ROSLIB.Topic({\n        ros: this.ros,                    // Reference to ROS Node\n        name: \"/gps_list\",                // Topic name to publish on\n        messageType: \"mobility/points\"    // \"Package/File\" location of message type\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros publisher\");\n    }\n  }\n\n  // Creates ROS Topic objects for Listeners\n  // Similar to Publishers, but includes throttle rate and queque for the incoming messages\n  createListeners() {\n    try {\n      this.antenna_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/antenna\",\n        messageType: \"fake_sensor_test/antenna\",\n        throttle_rate: this.THROTTLE_RATE,\n        queue_length: this.QUEUE_LENGTH\n      });\n\n      this.rovergps_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/rover_gnss\",\n        messageType: \"telemetry/gps\",\n        throttle_rate: this.THROTTLE_RATE,\n        queue_length: this.QUEUE_LENGTH\n      });\n\n      this.basegps_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        //name: \"/rover_gnss\",\n        //messageType: \"telemetry/gps\",\n        throttle_rate: 10,\n        queue_length: this.QUEUE_LENGTH\n      });\n\n      // console.log(this.rovergps_listener);\n\n      this.imu_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/imu\",\n        messageType: \"sensor_msgs/Imu\",\n        // messageType: \"sensor_msgs/Imu\",\n        throttle_rate: this.THROTTLE_RATE,\n        queue_length: this.QUEUE_LENGTH\n      });\n\n      this.mobility_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/mobility\",\n        messageType: \"fake_sensor_test/mobility\",\n        throttle_rate: this.THROTTLE_RATE,\n        queue_length: this.QUEUE_LENGTH\n      });\n\n      this.ultrasonic_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/ultrasonic\",\n        messageType: \"fake_sensor_test/ultrasonic\",\n        throttle_rate: this.THROTTLE_RATE,\n        queue_length: this.QUEUE_LENGTH\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros listener\");\n    }\n  }\n\n  // Creates a ROS Node and connects to a ROS server via a url/IP\n  connectRosBridge(url) {\n    try {\n      // ROS Node\n      this.ros = new ROSLIB.Ros({\n        url: url\n      });\n    } catch (e) {\n      //Fail to create ROS Node\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros object\");\n      return false;\n    }\n  }\n\n  // Renders Container of Various Components\n  // State Data is passed to the appropriate Component Prop Data\n  render() {\n    return (\n      <Container fluid={true} className=\"pt-2\">\n        <MyNavbar />\n        <Container>\n          <Row className=\"mt-2\">\n            <Col>\n              {/* IMU Component */}\n              <IMU\n                position={this.state.imu.position}\n                rotation={this.state.imu.rotation}\n              />\n            </Col>\n            <Col>\n              {/* Antenna Component */}\n              <AntennaSignal\n                signal_strength={this.state.antenna.decibels} />\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            <Col>\n              {/* Mobility Current Draw Component */}\n              <MobilityCurrentDraw\n                current_draw={this.state.mobility.amps}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            {/* Temperature Component */}\n\n            {/* <TemperatureSensor/> */}\n\n            {/* <Col>\n            <MapTile currentPosition={this.state.gps.currentPosition} />\n          </Col>\n          <Col>\n            <Compass heading={this.state.imu.heading} />\n          </Col>\n          <Col> */}\n            <Col>\n              {/* Ultrasonic Sensor Component */}\n              <UltrasonicSensor\n                max_distance={this.state.ultrasonic.distance} />\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            <Col>\n              <InverseKinematics />\n            </Col>\n            <Col>\n              <GPS />\n            </Col>\n          </Row>\n          {/* <Row className=\"mt-2\">\n          <Col>\n            <AntennaSignal decibels={this.state.antenna.decibels} />\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col>\n            <MobilityCurrentDraw\n              ampsA={this.state.roboclaw.a.amps}\n              ampsB={this.state.roboclaw.b.amps}\n            />\n          </Col>\n        </Row> */}\n          {/* Not added by Michael, no idea about Toast */}\n          <ToastContainer autoClose={3000} />\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/Science.js",["97","98","99","100"],"// React imports\nimport React, { Component } from \"react\";\n\n// Bootstrap imports\nimport \"./darkly-bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n// Toastify imports\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// Custom components\nimport MapTile from \"./components/MapTile\";\nimport Compass from \"./components/Compass\";\nimport UVSensor from \"./components/UVSensor\";\nimport TemperatureSensor from \"./components/TemperatureSensor\";\nimport HumiditySensor from \"./components/HumiditySensor\";\nimport ROSLIB from \"roslib\";\nimport CO2Sensor from \"./components/CO2Sensor\";\n\nclass Science extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      temperature: {\n        ambientC: Array(20).fill(null),\n        ambientF: Array(20).fill(null),\n        objectC: Array(20).fill(null),\n        objectF: Array(20).fill(null)\n      },\n\n      co2: {ppm: null},\n\n      uv: {\n        uv_visible: null,\n        uv_infared: null,\n        uv_index: null\n      },\n\n      humidity: {\n        humidity_temperature: null,\n        humidity: null\n      }\n    };\n\n    this.connectRosBridge(\"ws://192.168.1.103:9090\");\n    this.createListeners();\n    //this.createPublishers();\n    this.registerCallbacks();\n  }\n\n  registerCallbacks() {\n    // Register ros callbacks\n    this.ros.on(\"connection\", () => {\n      this.setState({\n        status: \"Connected\"\n      });\n    });\n    this.ros.on(\"error\", error => {\n      this.setState({\n        status: \"Error\"\n      });\n    });\n    this.ros.on(\"closed\", () => {\n      this.setState({\n        status: \"Closed\"\n      });\n    });\n\n    // Register listener callbacks\n    if (this.sensor_listener) {\n      this.sensor_listener.subscribe(m => {\n          const hist0 = this.state.temperature.ambientC.slice(1);\n          const hist1 = this.state.temperature.ambientF.slice(1);\n          const hist2 = this.state.temperature.objectC.slice(1);\n          const hist3 = this.state.temperature.objectF.slice(1);\n        this.setState({\n          temperature: {\n             ambientC: hist0.concat([m.ambientC]),\n             ambientF: hist1.concat([m.ambientF]),\n             objectC: hist2.concat([m.objectC]),\n             objectF: hist3.concat([m.objectF])\n          },\n          co2: {ppm: m.co2_ppm},\n\n          uv: {\n            uv_intensity: m.uv_intensity\n            //uv_visible: m.uv_visible,\n            //uv_infared: m.uv_infared,\n            //uv_index: m.uv_index\n          },\n\n          humidity: {\n            humidity_temperature: m.humidity_temperature,\n            humidity: m.humidity\n          }\n        });\n      });\n    }\n  }\n\n  // createPublishers() {\n  //   try {\n  //     this.gps_publisher = new ROSLIB.Topic({\n  //       ros: this.ros,\n  //       name: \"/gnss\",\n  //       messageType: \"gnss/gps\"\n  //     });\n  //   } catch (e) {\n  //     //Fail to create ROS object\n  //     this.setState({\n  //       status: \"Error\"\n  //     });\n  //     console.log(\"Error: Failed to create ros publisher\");\n  //   }\n  // }\n\n  createListeners() {\n    try {\n      this.sensor_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/sensors\",\n        messageType: \"science_sensors/sci_msgs\"\n      });\n      \n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros listener\");\n    }\n  }\n\n  connectRosBridge(url) {\n    try {\n      this.ros = new ROSLIB.Ros({\n        url: url //connect to the local host to test on my machine\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros object\");\n      return false;\n    }\n  }\n\n  render() {\n    const ambientC = this.state.temperature.ambientC[0];\n    const ppm = this.state.co2.ppm;\n    const uv_intensity = this.state.uv.uv_intensity;\n    const humidity = this.state.humidity.humidity;\n    const humidity_temperature = this.state.humidity.humidity_temperature;\n    return (\n      <Container fluid={true} className=\"pt-2\">\n        <Row>\n          <Col>\n            <TemperatureSensor temperature={this.state.temperature}/>\n            <HumiditySensor humidity={humidity} humidity_temperature={humidity_temperature}/>\n          </Col>\n          <Col>\n            <CO2Sensor ppm={ppm}/>\n            <UVSensor uv_intensity={uv_intensity}/>\n          </Col>\n        </Row>\n        <ToastContainer autoClose={3000} />\n      </Container>\n    );\n  }\n}\n\nexport default Science;\n","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/Extreme.js",["101","102","103","104"],"// React imports\nimport React, { Component } from \"react\";\n\n// Bootstrap imports\nimport \"./darkly-bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n// Toastify imports\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// Custom components\nimport IMU from \"./components/IMU\";\nimport MapTile from \"./components/MapTile\";\nimport Compass from \"./components/Compass\";\nimport UltraSonicSensor from \"./components/UltrasonicSensor\";\nimport GPS from \"./components/GPS\";\nimport AntennaSignal from \"./components/AntennaSignal\";\nimport MobilityCurrentDraw from \"./components/MobilityCurrentDraw\";\nimport ROSLIB from \"roslib\";\n\nclass Extreme extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imu: {\n        rotation: null,\n        heading: null\n      },\n      gps: {\n        currentPosition: [null, null]\n      },\n      antenna: {\n        decibals: null\n      },\n      ultrasonic: {\n        distance: null\n      },\n\n      roboclaw: {\n        a: {\n          amps: null\n        },\n        b: {\n          amps: null\n        }\n      }\n    };\n\n    this.connectRosBridge(\"ws://localhost:9090\");\n    this.createListeners();\n    this.createPublishers();\n    this.registerCallbacks();\n  }\n\n  registerCallbacks() {\n    // Register ros callbacks\n    this.ros.on(\"connection\", () => {\n      this.setState({\n        status: \"Connected\"\n      });\n    });\n    this.ros.on(\"error\", error => {\n      this.setState({\n        status: \"Error\"\n      });\n    });\n    this.ros.on(\"closed\", () => {\n      this.setState({\n        status: \"Closed\"\n      });\n    });\n\n    // Register listener callbacks\n    if (this.antenna_listener) {\n      this.antenna_listener.subscribe(m => {\n        this.setState({\n          decibels: m.signal_strength\n        });\n      });\n    }\n\n    if (this.gps_listener) {\n      this.gps_listener.subscribe(m => {\n        this.setState({\n          latitude: m.roverLat,\n          longitude: m.roverLon\n        });\n      });\n    }\n\n    if (this.imu_listener) {\n      this.imu_listener.subscribe(m => {\n        this.setState({\n          yaw: m.yaw,\n          pitch: m.pitch,\n          roll: m.roll\n        });\n      });\n    }\n\n    if (this.mobility_listener) {\n      this.mobility_listener.subscribe(m => {\n        this.setState({\n          amperage: m.current_draw\n        });\n      });\n    }\n\n    if (this.ultrasonic_listener) {\n      this.ultrasonic_listener.subscribe(m => {\n        this.setState({\n          distance: m.max_distance\n        });\n      });\n    }\n  }\n\n  createPublishers() {\n    try {\n      this.gps_publisher = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/gnss\",\n        messageType: \"gnss/gps\"\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros publisher\");\n    }\n  }\n\n  createListeners() {\n    try {\n      this.antenna_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/antenna\",\n        messageType: \"fake_sensor_test/antenna\"\n      });\n\n      this.gps_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/gnss\",\n        messageType: \"gnss/gps\"\n      });\n\n      this.imu_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/imu\",\n        messageType: \"imu/axes\"\n      });\n\n      this.mobility_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/mobility\",\n        messageType: \"fake_sensor_test/mobility\"\n      });\n\n      this.ultrasonic_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/ultrasonic\",\n        messageType: \"fake_sensor_test/ultrasonic\"\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros listener\");\n    }\n  }\n\n  connectRosBridge(url) {\n    try {\n      this.ros = new ROSLIB.Ros({\n        url: url //connect to the local host to test on my machine\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros object\");\n      return false;\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid={true} className=\"pt-2\">\n        <Row>\n          <Col>\n            <IMU rotation={this.state.imu.rotation} />\n          </Col>\n          <Col>\n            <MapTile currentPosition={this.state.gps.currentPosition} />\n          </Col>\n          <Col>\n            <Compass heading={this.state.imu.heading} />\n          </Col>\n          <Col>\n            <UltraSonicSensor distance={this.state.ultrasonic.distance} />\n          </Col>\n        </Row>\n        <ToastContainer autoClose={3000} />\n      </Container>\n    );\n  }\n}\n\nexport default Extreme;\n","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/Autonomous.js",["105","106","107","108"],"// React imports\nimport React, { Component } from \"react\";\n\n// Bootstrap imports\nimport \"./darkly-bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n// Toastify imports\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// Custom components\nimport IMU from \"./components/IMU\";\nimport MapTile from \"./components/MapTile\";\nimport Compass from \"./components/Compass\";\nimport UltraSonicSensor from \"./components/UltrasonicSensor\";\nimport GPS from \"./components/GPS\";\nimport AntennaSignal from \"./components/AntennaSignal\";\nimport MobilityCurrentDraw from \"./components/MobilityCurrentDraw\";\nimport ROSLIB from \"roslib\";\n\nclass Autonomous extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imu: {\n        rotation: null,\n        heading: null\n      },\n      gps: {\n        currentPosition: [null, null]\n      },\n      antenna: {\n        decibals: null\n      },\n      ultrasonic: {\n        distance: null\n      },\n\n      roboclaw: {\n        a: {\n          amps: null\n        },\n        b: {\n          amps: null\n        }\n      }\n    };\n\n    this.connectRosBridge(\"ws://localhost:9090\");\n    this.createListeners();\n    this.createPublishers();\n    this.registerCallbacks();\n  }\n\n  registerCallbacks() {\n    // Register ros callbacks\n    this.ros.on(\"connection\", () => {\n      this.setState({\n        status: \"Connected\"\n      });\n    });\n    this.ros.on(\"error\", error => {\n      this.setState({\n        status: \"Error\"\n      });\n    });\n    this.ros.on(\"closed\", () => {\n      this.setState({\n        status: \"Closed\"\n      });\n    });\n\n    // Register listener callbacks\n    if (this.antenna_listener) {\n      this.antenna_listener.subscribe(m => {\n        this.setState({\n          decibels: m.signal_strength\n        });\n      });\n    }\n\n    if (this.gps_listener) {\n      this.gps_listener.subscribe(m => {\n        this.setState({\n          latitude: m.roverLat,\n          longitude: m.roverLon\n        });\n      });\n    }\n\n    if (this.imu_listener) {\n      this.imu_listener.subscribe(m => {\n        this.setState({\n          yaw: m.yaw,\n          pitch: m.pitch,\n          roll: m.roll\n        });\n      });\n    }\n\n    if (this.mobility_listener) {\n      this.mobility_listener.subscribe(m => {\n        this.setState({\n          amperage: m.current_draw\n        });\n      });\n    }\n\n    if (this.ultrasonic_listener) {\n      this.ultrasonic_listener.subscribe(m => {\n        this.setState({\n          distance: m.max_distance\n        });\n      });\n    }\n  }\n\n  createPublishers() {\n    try {\n      this.gps_publisher = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/gnss\",\n        messageType: \"gnss/gps\"\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros publisher\");\n    }\n  }\n\n  createListeners() {\n    try {\n      this.antenna_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/antenna\",\n        messageType: \"fake_sensor_test/antenna\"\n      });\n\n      this.gps_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/gnss\",\n        messageType: \"gnss/gps\"\n      });\n\n      this.imu_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/imu\",\n        messageType: \"imu/axes\"\n      });\n\n      this.mobility_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/mobility\",\n        messageType: \"fake_sensor_test/mobility\"\n      });\n\n      this.ultrasonic_listener = new ROSLIB.Topic({\n        ros: this.ros,\n        name: \"/ultrasonic\",\n        messageType: \"fake_sensor_test/ultrasonic\"\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros listener\");\n    }\n  }\n\n  connectRosBridge(url) {\n    try {\n      this.ros = new ROSLIB.Ros({\n        url: url //connect to the local host to test on my machine\n      });\n    } catch (e) {\n      //Fail to create ROS object\n      this.setState({\n        status: \"Error\"\n      });\n      console.log(\"Error: Failed to create ros object\");\n      return false;\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid={true} className=\"pt-2\">\n        <Row>\n          <Col>\n            <IMU rotation={this.state.imu.rotation} />\n          </Col>\n          <Col>\n            <MapTile currentPosition={this.state.gps.currentPosition} />\n          </Col>\n          <Col>\n            <Compass heading={this.state.imu.heading} />\n          </Col>\n          <Col>\n            <UltraSonicSensor distance={this.state.ultrasonic.distance} />\n          </Col>\n        </Row>\n        <ToastContainer autoClose={3000} />\n      </Container>\n    );\n  }\n}\n\nexport default Autonomous;\n","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/serviceWorker.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/IMU.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/MapTile.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/Compass.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/UltrasonicSensor.js",["109"],"import React, { Component } from \"react\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport DarkUnica from \"highcharts/themes/dark-unica\";\nimport { toast } from \"react-toastify\";\n\nDarkUnica(Highcharts);\n\nclass UltrasonicSensor extends Component {\n  componentWillReceiveProps() {\n    this.setState({\n      chartOptions: {\n        series: [\n          {\n            data: this.props.max_distance\n          },\n          // {\n          //   data: this.props.ampsB\n          // }\n        ]\n      }\n    })\n  }\n\n  componentDidMount() {\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 0,\n      chartOptions: {\n        chart: {\n          type: \"spline\"\n        },\n\n        time: {\n          useUTC: false\n        },\n\n        title: {\n          text: \"Ultrasonic Sensor\"\n        },\n\n        yAxis: {\n          min: 0,\n          max: 80,\n          title: {\n            text: \"Distance\"\n          },\n          plotLines: [\n            {\n              value: 0,\n              width: 1,\n              color: \"#808080\"\n            }\n          ],\n          // plotBands: [\n          //   {\n          //     color: \"#FFCCCB\",\n          //     from: 15,\n          //     to: 20\n          //   }\n          // ]\n        },\n\n        legend: {\n          enabled: true\n        },\n\n        plotOptions: {\n          series: {\n            marker: {\n              enabled: false\n            }\n          }\n        },\n\n        series: [\n          {\n            // zoneAxis: \"y\",\n            // zones: [\n            //   { value: 5, color: \"red\" },\n            //   { value: 15, color: \"orange\" },\n            //   { color: \"green\" }\n            // ],\n            name: \"Distance\",\n            data: []\n            // data: [this.props.max_distance]\n          }\n        ]\n      }\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <HighchartsReact\n          ref={this.chartComponent}\n          highcharts={Highcharts}\n          options={this.state.chartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UltrasonicSensor;\n","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/GPS.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/MobilityCurrentDraw.js",["110"],"import React, { Component } from \"react\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport DarkUnica from \"highcharts/themes/dark-unica\";\nimport { toast } from \"react-toastify\";\n\nDarkUnica(Highcharts);\n\nclass MobilityCurrentDraw extends Component {\n  componentWillReceiveProps() {\n    this.setState({\n      chartOptions: {\n        series: [\n          {\n            data: this.props.current_draw\n          },\n          // {\n          //   data: this.props.ampsB\n          // }\n        ]\n      }\n    });\n  }\n\n  componentDidMount() {\n    // setInterval(() => {\n    //   let prevDataA = this.state.chartOptions.series[0].data;\n    //   let prevDataB = this.state.chartOptions.series[1].data;\n\n    //   if (prevDataA.length > 5) {\n    //     prevDataA.shift();\n    //   }\n\n    //   if (prevDataB.length > 5) {\n    //     prevDataB.shift();\n    //   }\n\n    //   prevDataA.push([new Date().getTime(), Math.random() * 20]);\n    //   prevDataB.push([new Date().getTime(), Math.random() * 20]);\n\n    //   // if (\n    //   //   prevDataA[prevDataA.length - 1][1] < 5 &&\n    //   //   !toast.isActive(this.POOR_SIGNAL_ID)\n    //   // ) {\n    //   //   toast.error(\"Signal Strength Critical!\", {\n    //   //     position: toast.POSITION.BOTTOM_RIGHT,\n    //   //     toastId: this.POOR_SIGNAL_ID\n    //   //   });\n    //   // }\n\n    //   this.setState({\n    //     chartOptions: {\n    //       series: [\n    //         {\n    //           data: [...prevDataA]\n    //         },\n    //         {\n    //           data: [...prevDataB]\n    //         }\n    //       ]\n    //     }\n    //   });\n    // }, 1000);\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 0,\n      chartOptions: {\n        chart: {\n          type: \"spline\"\n        },\n\n        time: {\n          useUTC: false\n        },\n\n        title: {\n          text: \"Mobility Current Draw\"\n        },\n\n        xAxis: {\n          type: \"datetime\"\n        },\n\n        yAxis: {\n          min: 0,\n          max: 80,\n          title: {\n            text: \"Amps\"\n          },\n          plotLines: [\n            {\n              value: 0,\n              width: 1,\n              color: \"#808080\"\n            }\n          ],\n          // plotBands: [\n          //   {\n          //     color: \"#FFCCCB\",\n          //     from: 15,\n          //     to: 20\n          //   }\n          // ]\n        },\n\n        legend: {\n          enabled: true\n        },\n\n        plotOptions: {\n          series: {\n            marker: {\n              enabled: false\n            }\n          }\n        },\n\n        series: [\n          {\n            // zoneAxis: \"y\",\n            // zones: [\n            //   { value: 5, color: \"red\" },\n            //   { value: 15, color: \"orange\" },\n            //   { color: \"green\" }\n            // ],\n            name: \"Current\",\n            data: []\n          }\n          // {\n            // zoneAxis: \"y\",\n            // zones: [\n            //   { value: 5, color: \"red\" },\n            //   { value: 15, color: \"blue\" },\n            //   { color: \"green\" }\n            // ],\n          //  name: \"Roboclaw B\",\n          //   data: []\n          // }\n        ]\n      }\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <HighchartsReact\n          ref={this.chartComponent}\n          highcharts={Highcharts}\n          options={this.state.chartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MobilityCurrentDraw;\n","/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/InverseKinematics.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/AntennaSignal.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/UVSensor.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/TemperatureSensor.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/HumiditySensor.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/CO2Sensor.js",[],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/components/Navbar.js",[],["111","112"],"/home/gabe/Documents/CSUF/Titan_Rover/base_station2020/web-ui/src/XR.js",[],{"ruleId":"113","severity":1,"message":"114","line":3,"column":17,"nodeType":"115","messageId":"116","endLine":3,"endColumn":21},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"113","severity":1,"message":"121","line":24,"column":8,"nodeType":"115","messageId":"116","endLine":24,"endColumn":15},{"ruleId":"113","severity":1,"message":"122","line":25,"column":8,"nodeType":"115","messageId":"116","endLine":25,"endColumn":15},{"ruleId":"113","severity":1,"message":"123","line":32,"column":8,"nodeType":"115","messageId":"116","endLine":32,"endColumn":25},{"ruleId":"113","severity":1,"message":"124","line":11,"column":26,"nodeType":"115","messageId":"116","endLine":11,"endColumn":31},{"ruleId":"113","severity":1,"message":"121","line":15,"column":8,"nodeType":"115","messageId":"116","endLine":15,"endColumn":15},{"ruleId":"113","severity":1,"message":"122","line":16,"column":8,"nodeType":"115","messageId":"116","endLine":16,"endColumn":15},{"ruleId":"113","severity":1,"message":"125","line":154,"column":11,"nodeType":"115","messageId":"116","endLine":154,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":11,"column":26,"nodeType":"115","messageId":"116","endLine":11,"endColumn":31},{"ruleId":"113","severity":1,"message":"126","line":19,"column":8,"nodeType":"115","messageId":"116","endLine":19,"endColumn":11},{"ruleId":"113","severity":1,"message":"127","line":20,"column":8,"nodeType":"115","messageId":"116","endLine":20,"endColumn":21},{"ruleId":"113","severity":1,"message":"128","line":21,"column":8,"nodeType":"115","messageId":"116","endLine":21,"endColumn":27},{"ruleId":"113","severity":1,"message":"124","line":11,"column":26,"nodeType":"115","messageId":"116","endLine":11,"endColumn":31},{"ruleId":"113","severity":1,"message":"126","line":19,"column":8,"nodeType":"115","messageId":"116","endLine":19,"endColumn":11},{"ruleId":"113","severity":1,"message":"127","line":20,"column":8,"nodeType":"115","messageId":"116","endLine":20,"endColumn":21},{"ruleId":"113","severity":1,"message":"128","line":21,"column":8,"nodeType":"115","messageId":"116","endLine":21,"endColumn":27},{"ruleId":"113","severity":1,"message":"124","line":5,"column":10,"nodeType":"115","messageId":"116","endLine":5,"endColumn":15},{"ruleId":"113","severity":1,"message":"124","line":5,"column":10,"nodeType":"115","messageId":"116","endLine":5,"endColumn":15},{"ruleId":"117","replacedBy":"129"},{"ruleId":"119","replacedBy":"130"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["131"],"no-negated-in-lhs",["132"],"'MapTile' is defined but never used.","'Compass' is defined but never used.","'TemperatureSensor' is defined but never used.","'toast' is defined but never used.","'ambientC' is assigned a value but never used.","'GPS' is defined but never used.","'AntennaSignal' is defined but never used.","'MobilityCurrentDraw' is defined but never used.",["131"],["132"],"no-global-assign","no-unsafe-negation"]